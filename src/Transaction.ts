import { User } from './User'
import { Utils } from './Utils'

declare let lightwallet: any

export class Transaction {

  constructor (private user: User, private utils: Utils) {
  }

  public prepare (networkAddress: string, functionName: string, parameters: any[]): Promise<any> {
    return Promise.all([ this.getAbi(), this.getTxInfos(this.user.address) ])
      .then(([ abi, txinfos ]) => {
        const txOptions = {
          gasPrice: txinfos.gasPrice, // TODO let user set gas price
          gasLimit: 1000000, // TODO let user set gas limit
          value: 0,
          nonce: txinfos.nonce,
          to: networkAddress
        }
        const txObj = {
          rawTx: lightwallet.txutils.functionTx(abi, functionName, parameters, txOptions),
          ethFees: 200000 * txOptions.gasPrice // TODO set gas dynamically according to method
        }
        return txObj
      })
  }

  public deployProxyContract (network: string): Promise<any> {
    const { address } = this.user
    return this.getTxInfos(address)
      .then(txinfos => {
        const txOptions = {
          gasPrice: txinfos.gasPrice, // TODO let user set gas price
          gasLimit: 1000000, // TODO let user set gas limit
          value: 0,
          nonce: 0,
          to: network,
          data: `6060604052341561000c57fe5b604051602080610c54833981016040528080519060200190919050505b5b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b505b610b95806100bf6000396000f300606060405236156100a2576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063095ea7b3146100f95780630bfe32a8146101385780631a6952301461017d57806323b872dd146101b35780632f54bf6e1461021157806370a082311461025f5780638da5cb5b146102a9578063a9059cbb146102fb578063d16b87ed1461033a578063dd62ed3e14610397575b6100f75b3373ffffffffffffffffffffffffffffffffffffffff167f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874346040518082815260200191505060405180910390a25b565b005b341561010157fe5b610136600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610400565b005b341561014057fe5b61017b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803563ffffffff169060200190919050506104d7565b005b341561018557fe5b6101b1600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506105ba565b005b34156101bb57fe5b61020f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061060f565b005b341561021957fe5b610245600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061071b565b604051808215151515815260200191505060405180910390f35b341561026757fe5b610293600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610776565b6040518082815260200191505060405180910390f35b34156102b157fe5b6102b961085a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561030357fe5b610338600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610880565b005b341561034257fe5b61037d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803563ffffffff16906020019091905050610957565b604051808215151515815260200191505060405180910390f35b341561039f57fe5b6103ea600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a50565b6040518082815260200191505060405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15156104c157fe5b6102c65a03f115156104cf57fe5b5050505b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630bfe32a883836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018263ffffffff1663ffffffff16815260200192505050600060405180830381600087803b15156105a457fe5b6102c65a03f115156105b257fe5b5050505b5050565b6105c33361071b565b1561060b5780600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b5b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd8484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b151561070457fe5b6102c65a03f1151561071257fe5b5050505b505050565b6000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161490505b919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561083a57fe5b6102c65a03f1151561084857fe5b5050506040518051905090505b919050565b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b151561094157fe5b6102c65a03f1151561094f57fe5b5050505b5050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d16b87ed84846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018263ffffffff1663ffffffff16815260200192505050602060405180830381600087803b1515610a2f57fe5b6102c65a03f11515610a3d57fe5b5050506040518051905090505b92915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515610b4857fe5b6102c65a03f11515610b5657fe5b5050506040518051905090505b929150505600a165627a7a723058208c802b5a82913580baf93e72812659e74fc6964955379d47fd10cc754b4773cd0029`
        }
        const contract = lightwallet.txutils.createContractTx(address.substring(2, address.length), txOptions)
        this.confirm(contract.tx)
      })
  }

  public confirm (rawTx: string): Promise<string> {
    return this.user.signTx(rawTx).then(signedTx => this.relayTx(signedTx))
  }

  private getAbi (): Promise<any> {
    return this.utils.fetchUrl(`tokenabi`)
  }

  private getTxInfos (address: string): Promise<any> {
    return this.utils.fetchUrl(`txinfos/${address}`)
  }

  private relayTx (data: string): Promise<string> {
    const headers = new Headers({
      'Content-Type': 'application/json'
    })
    const options = {
      method: 'POST',
      headers,
      body: JSON.stringify({ data: `0x${data}` })
    }
    return this.utils.fetchUrl('relay', options)
  }

  private handleError (error: any) {
    return Promise.reject(error.json().message || error)
  }
}
